package com.krnl32.eye.parser.lexer;

public enum TokenType {
	// TMP REMOVE
	LITERAL_FLOAT,
	LITERAL_DOUBLE,
	LITERAL_CHAR,
	LITERAL_STRING,
	LITERAL_BOOLEAN,

	KEYWORD_DATATYPE_FLOAT,
	KEYWORD_DATATYPE_DOUBLE,
	KEYWORD_DATATYPE_CHAR,
	KEYWORD_DATATYPE_STR,
	KEYWORD_DATATYPE_BOOL,


	// Literals
	LITERAL_INT8,
	LITERAL_INT16,
	LITERAL_INT32,
	LITERAL_INT64,
	LITERAL_INT128,

	LITERAL_UINT8,
	LITERAL_UINT16,
	LITERAL_UINT32,
	LITERAL_UINT64,
	LITERAL_UINT128,

	LITERAL_FLOAT32,
	LITERAL_FLOAT64,
	LITERAL_FLOAT128,

	LITERAL_CHAR8,
	LITERAL_CHAR16,
	LITERAL_CHAR32,

	LITERAL_STR8,
	LITERAL_STR16,
	LITERAL_STR32,

	LITERAL_INTPTR,
	LITERAL_UINTPTR,

	LITERAL_BOOL,
	LITERAL_NULL,

	// Identifier & Keywords
	IDENTIFIER,

	// Signed Integer Types
	KEYWORD_DATATYPE_INT8_T,
	KEYWORD_DATATYPE_INT16_T,
	KEYWORD_DATATYPE_INT32_T,
	KEYWORD_DATATYPE_INT64_T,
	KEYWORD_DATATYPE_INT128_T,

	// Unsigned Integer Types
	KEYWORD_DATATYPE_UINT8_T,
	KEYWORD_DATATYPE_UINT16_T,
	KEYWORD_DATATYPE_UINT32_T,
	KEYWORD_DATATYPE_UINT64_T,
	KEYWORD_DATATYPE_UINT128_T,

	// Floating-Point Types
	KEYWORD_DATATYPE_FLOAT32_T,
	KEYWORD_DATATYPE_FLOAT64_T,
	KEYWORD_DATATYPE_FLOAT128_T,

	// Character Types
	KEYWORD_DATATYPE_CHAR8_T,
	KEYWORD_DATATYPE_CHAR16_T,
	KEYWORD_DATATYPE_CHAR32_T,

	// String Types
	KEYWORD_DATATYPE_STR8_T,
	KEYWORD_DATATYPE_STR16_T,
	KEYWORD_DATATYPE_STR32_T,

	// Pointer Types
	KEYWORD_DATATYPE_INTPTR_T,
	KEYWORD_DATATYPE_UINTPTR_T,

	// Boolean Type
	KEYWORD_DATATYPE_BOOL8_T,

	// Void Type
	KEYWORD_DATATYPE_VOID,

	// Type Qualifiers
	KEYWORD_TYPE_QUALIFIER_CONST,

	// Control Keywords
	KEYWORD_CONTROL_IF,
	KEYWORD_CONTROL_ELSE,

	// Iteration Keywords
	KEYWORD_ITERATION_WHILE,
	KEYWORD_ITERATION_DO,
	KEYWORD_ITERATION_FOR,
	KEYWORD_ITERATION_CONTINUE,
	KEYWORD_ITERATION_BREAK,

	// Function Keywords
	KEYWORD_FUNCTION,
	KEYWORD_RETURN,

	// Operators
	OPERATOR_BINARY_PLUS,
	OPERATOR_BINARY_MINUS,
	OPERATOR_BINARY_STAR,
	OPERATOR_BINARY_SLASH,
	OPERATOR_BINARY_MODULO,

	OPERATOR_ARITHMETIC_INCREMENT,
	OPERATOR_ARITHMETIC_DECREMENT,

	OPERATOR_ASSIGNMENT,
	OPERATOR_ASSIGNMENT_PLUS,
	OPERATOR_ASSIGNMENT_MINUS,
	OPERATOR_ASSIGNMENT_STAR,
	OPERATOR_ASSIGNMENT_SLASH,
	OPERATOR_ASSIGNMENT_MODULO,
	OPERATOR_ASSIGNMENT_BITWISE_AND,
	OPERATOR_ASSIGNMENT_BITWISE_OR,
	OPERATOR_ASSIGNMENT_BITWISE_XOR,
	OPERATOR_ASSIGNMENT_BITWISE_LEFT_SHIFT,
	OPERATOR_ASSIGNMENT_BITWISE_RIGHT_SHIFT,

	OPERATOR_RELATIONAL_EQUALS,
	OPERATOR_RELATIONAL_NOT_EQUALS,
	OPERATOR_RELATIONAL_SMALLER,
	OPERATOR_RELATIONAL_GREATER,
	OPERATOR_RELATIONAL_SMALLER_EQUALS,
	OPERATOR_RELATIONAL_GREATER_EQUALS,

	OPERATOR_LOGICAL_AND,
	OPERATOR_LOGICAL_OR,
	OPERATOR_LOGICAL_NOT,

	OPERATOR_BITWISE_BINARY_AND,
	OPERATOR_BITWISE_BINARY_OR,
	OPERATOR_BITWISE_BINARY_XOR,
	OPERATOR_BITWISE_LEFT_SHIFT,
	OPERATOR_BITWISE_RIGHT_SHIFT,
	OPERATOR_BITWISE_NOT,

	OPERATOR_LEFT_PARENTHESIS,
	OPERATOR_LEFT_BRACKET,
	OPERATOR_QUESTION_MARK,
	OPERATOR_DOT,
	OPERATOR_COMMA,

	// Symbols
	SYMBOL_RIGHT_PARENTHESIS,
	SYMBOL_RIGHT_BRACKET,
	SYMBOL_LEFT_BRACE,
	SYMBOL_RIGHT_BRACE,
	SYMBOL_COLON,
	SYMBOL_SEMI_COLON,
	SYMBOL_BACKSLASH,

	// Others
	COMMENT,
	NEWLINE,
	ESCAPE_CHARACTER,
	END_OF_FILE
}
